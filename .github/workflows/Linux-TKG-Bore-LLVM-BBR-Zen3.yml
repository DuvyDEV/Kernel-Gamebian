name: build-linux-tkg (Debian 13 container)

on:
  workflow_dispatch:
    inputs:
      tkg_ref:
        description: "Rama/tag de linux-tkg a usar (p.e. master)"
        default: "master"
        required: true
      release_tag:
        description: "Tag del Release a crear (vacío = auto)"
        default: ""
        required: false

permissions:
  contents: write  # necesario para crear el Release

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:13

    env:
      DEBIAN_FRONTEND: noninteractive
      # ====== Requisitos del usuario ======
      _distro: "Debian"
      _version: "v6.16.7"             # kernel v6.16.7
      _cpusched: "bore"
      _compiler: "llvm"              # usar clang/llvm
      _llvm_ias: "1"                 # assembler integrado LLVM
      _lto_mode: "thin"              # LLVM ThinLTO
      _tcp_cong_alg: "bbr"           # TCP BBR
      _default_cpu_gov: "performance"
      _kernel_on_diet: "true"
      # _rr_interval: "default"
      _tickless: "2"                 # tickless idle
      _timer_freq: "1000"
      _processor_opt: "znver3"
      _acs_override: "false"
      _logging_use_script: "no"      # evitar problemas en CI
      _install_after_building: "no"

    steps:
      - name: Preparar apt y dependencias base
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            ca-certificates curl git xz-utils \
            build-essential fakeroot dpkg-dev \
            bc bison flex libssl-dev libelf-dev dwarves \
            clang lld llvm ccache libncurses-dev rsync \
            pkg-config file
          update-ca-certificates

      - name: Checkout (este repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clonar linux-tkg
        run: |
          git clone https://github.com/Frogging-Family/linux-tkg
          cd linux-tkg
          git fetch --all --tags
          git checkout "${{ github.event.inputs.tkg_ref }}"

      - name: Compilar kernel (no interactivo)
        working-directory: linux-tkg
        shell: bash
        run: |
          chmod +x install.sh
          set -e
          ./install.sh install || {
            echo "::warning::install.sh pidió interacción; reintentando con respuestas por defecto"
            yes "" ./install.sh install
          }

      - name: Recolectar .deb
        shell: bash
        run: |
          mkdir -p dist
          # Copiar .deb generados desde posibles ubicaciones
          find . -type f -name "*.deb" -exec cp -v {} dist/ \; || true
          find linux-tkg -type f -name "*.deb" -exec cp -v {} dist/ \; || true
          find .. -maxdepth 1 -type f -name "*.deb" -exec cp -v {} dist/ \; || true
          if [ -z "$(ls -A dist/*.deb 2>/dev/null)" ]; then
            echo "No se encontraron .deb"; exit 1
          fi
          echo "Paquetes encontrados:"
          ls -lh dist

      - name: Extraer versión (para nombrar release)
        id: meta
        shell: bash
        run: |
          DEB="$(ls dist/*.deb | head -n1)"
          VER="$(dpkg-deb -f "$DEB" Version || true)"
          [ -z "$VER" ] && VER="unknown-${GITHUB_RUN_NUMBER}"
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Subir artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-tkg-amd64-${{ steps.meta.outputs.version }}
          path: dist/*.deb
          if-no-files-found: error
          retention-days: 7

      - name: Crear Release y adjuntar .deb
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag || format('linux-tkg-{0}', steps.meta.outputs.version) }}
          name: Linux-tkg ${{ steps.meta.outputs.version }}
          files: dist/*.deb
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
